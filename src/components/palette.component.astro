---
interface Props {
  dark: { light: string; normal: string; dark: string };
  light: { light: string; normal: string; dark: string };
  primary: string;
  secondary: string;
  views: number;
}

const { dark, light, primary, secondary, views } =
  Astro.props;
---

<div class="flex flex-col h-64">
  <div class="flex flex-col flex-1">
    <div class="flex-[2] rounded-ss-md rounded-se-md" style={`background-color:${primary}`}>
      <span>{primary.toUpperCase()}</span>
    </div>
    <div class="flex-1" style={`background-color:${secondary}`}>
      <span>{secondary.toUpperCase()}</span>
    </div>
  </div>
  <div class="flex">
    <div class="flex-1" style={`background-color:${dark.dark}`}>
      <span>{dark.dark.toUpperCase()}</span>
    </div>
    <div class="flex-1" style={`background-color:${dark.normal}`}>
      <span>{dark.normal.toUpperCase()}</span>
    </div>
    <div class="flex-1" style={`background-color:${dark.light}`}>
      <span>{dark.light.toUpperCase()}</span>
    </div>
  </div>
  <div class="flex">
    <div class="flex-1" style={`background-color:${light.dark}`}>
      <span>{light.dark.toUpperCase()}</span>
    </div>
    <div class="flex-1" style={`background-color:${light.normal}`}>
      <span>{light.normal.toUpperCase()}</span>
    </div>
    <div class="flex-1" style={`background-color:${light.light}`}>
      <span>{light.light.toUpperCase()}</span>
    </div>
  </div>
  <span
    class="rounded-es-md rounded-ee-md py-1 px-2 bg-dark text-light text-end"
    ><i class="mr-1 text-light fi fi-rr-eye"></i>{views}</span
  >
</div>

<style>
  div > div > div{
    @apply flex items-end justify-center min-h-10 hover:flex-[4] transition-all cursor-pointer;
  }
  div > div > div span {
    @apply opacity-0 bg-dark text-light bg-opacity-50 p-1 rounded-ss-md rounded-se-md;
  }
  div > div > div:hover span {
    @apply opacity-100;
  }
  span {
    @apply text-xs;
  }
</style>
